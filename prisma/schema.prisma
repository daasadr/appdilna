// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

model Template {
  id              String   @id @default(cuid())
  name            String
  description     String
  type            String   // 'prebuilt' | 'custom'
  category        String
  thumbnail       String?
  config          Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  pages           Page[]
  userId          String?  // Optional: if you want to track template ownership
  published       Boolean  @default(false)
  deploymentUrl   String?  // URL, kde je aplikace nasazena
  lastPublishedAt DateTime? // Čas poslední publikace
}

model Page {
  id         String     @id @default(cuid())
  name       String
  slug       String
  template   Template   @relation(fields: [templateId], references: [id])
  templateId String
  sections   Section[]
  order      Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Section {
  id        String    @id @default(cuid())
  name      String
  type      String    // 'header' | 'content' | 'footer' etc.
  content   Json      // Stores the ContentBlock data
  page      Page      @relation(fields: [pageId], references: [id])
  pageId    String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// For tracking content versions
model ContentVersion {
  id        String   @id @default(cuid())
  sectionId String
  content   Json
  createdAt DateTime @default(now())
  createdBy String?  // Optional: if you want to track who made the change
}

// For managing template categories
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Pro sledování publikovaných verzí
model PublishedVersion {
  id          String   @id @default(cuid())
  templateId  String
  sections    Json     // Snapshot všech sekcí v době publikace
  version     Int      // Číslo verze
  publishedAt DateTime @default(now())
  publishedBy String?  // ID uživatele, který publikoval
  isLive     Boolean  @default(true) // Aktuálně nasazená verze
}
